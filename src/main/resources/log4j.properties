log4j.level = info
log4j.rootLogger = ${log4j.level}, stdout ,E

log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = %d{MM-dd HH:mm:ss} %5p %c{2} - %X{userId} - %X{remoteIp} %m%n

log4j.appender.E = org.apache.log4j.RollingFileAppender
#log4j.appender.E.File = ${webapp}/logs/rank.log
log4j.appender.E.File = d:/logs/rank.log  
log4j.appender.E.Threshold = DEBUG
log4j.appender.E.MaxFileSize=10240KB  
log4j.appender.E.MaxBackupIndex=100
log4j.appender.E.Append = true
#log4j.appender.E.DatePattern = '.'yyyy-MM-dd
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = [rank-%p %d{yyyy-MM-dd HH:mm:ss}] %l | %m%n

#prj

#输出格式
#%m 输出代码中指定的消息
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#%r 输出自应用启动到输出该log信息耗费的毫秒数
#%c 输出所属的类目，通常就是所在类的全名
#%t 输出产生该日志事件的线程名
#%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数
#%x 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像Java servlets这样的多客户多线程的应用中。